"0","table(all$Fireplaces)"
"1","
"
"1","   0 "
"1","   1 "
"1","   2 "
"1","   3 "
"1","   4 "
"1","
"
"1","1420 "
"1","1267 "
"1"," 219 "
"1","  10 "
"1","   1 "
"1","
"
"0","sum(is.na(all$FireplaceQu))"
"1","[1]"
"1"," 0"
"1","
"
"0","#The amount of NA's match the amount of houses without fireplaces so we are going to replace NA's with ""None"" again"
"0","train$FireplaceQu[is.na(train$FireplaceQu)] <- ""None"""
"0","test$FireplaceQu[is.na(test$FireplaceQu)] <- ""None"""
"0",""
"0","#For the machine learning algorithm we will need as many values to be numerical so we are going to change all the vales that have quality feature"
"0",""
"0","qualities <- c(""None"" = 0, ""Po"" = 1, ""Fa"" = 2, ""TA"" = 3, ""Gd"" = 4, ""Ex"" = 5)"
"0",""
"0","train$FireplaceQu <- as.integer(revalue(train$FireplaceQu, qualities))"
"0","test$FireplaceQu <- as.integer(revalue(test$FireplaceQu, qualities))"
"0",""
"0","#Lot frontage can get tricky as missing values could mean no lot or just simply a missing value. We are going to impute the missing values with median values per area of living"
"0",""
"0","neigh_lot <- ggplot(data = all, aes(x = Neighborhood, y = LotFrontage))+"
"0","  geom_bar(stat = ""summary"", fun.y = ""median"", fill = ""darkgreen"")+"
"0","  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
"0",""
"0","for(i in 1:nrow(train)){"
"0","  if(is.na(train$LotFrontage[i])){"
"0","    train$LotFrontage[i] <- as.integer(median(train$LotFrontage[train$Neighborhood == train$Neighborhood[i]], na.rm = TRUE))"
"0","  }"
"0","}"
"0",""
"0","for(i in 1:nrow(test)){"
"0","  if(is.na(test$LotFrontage[i])){"
"0","    test$LotFrontage[i] <- as.integer(median(test$LotFrontage[test$Neighborhood == test$Neighborhood[i]], na.rm = TRUE))"
"0","  }"
"0","}"
"0",""
"0","#Heading to garage."
"0","missattrs[names(missattrs) %like% ""Garage""]"
"1","  GarageType "
"1"," GarageYrBlt "
"1","GarageFinish "
"1","  GarageCars "
"1","  GarageArea "
"1","  GarageQual "
"1","
"
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","
"
"1","  GarageCond "
"1","
"
"1","           0 "
"1","
"
"0","missingabs[names(missattrs) %like% ""Garage""]"
"1","  GarageType "
"1"," GarageYrBlt "
"1","GarageFinish "
"1","  GarageCars "
"1","  GarageArea "
"1","  GarageQual "
"1","
"
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","           0 "
"1","
"
"1","  GarageCond "
"1","
"
"1","           0 "
"1","
"
"0","#GarageType has same amount of missing values as GarageYrBlt, GarageFinish, GarageQual and GarageCond so we can take that those missing values are due to garage lacking altogether"
"0",""
"0",""
"0","train$GarageYrBlt[is.na(train$GarageYrBlt)] <- train$YearBuilt[is.na(train$GarageYrBlt)]"
"0","test$GarageYrBlt[is.na(test$GarageYrBlt)] <- test$YearBuilt[is.na(test$GarageYrBlt)]"
"0",""
"0","train$GarageFinish[is.na(train$GarageFinish)] <- ""None"""
"0","test$GarageFinish[is.na(test$GarageFinish)] <- ""None"""
"0",""
"0","train$GarageArea[is.na(train$GarageArea)] <- 0"
"0","test$GarageArea[is.na(test$GarageArea)] <- 0"
"0",""
"0",""
"0","train$GarageQual[is.na(train$GarageQual)] <- ""None"""
"0","test$GarageQual[is.na(test$GarageQual)] <- ""None"""
"0",""
"0","train$GarageQual <- as.integer(revalue(train$GarageQual, qualities))"
"0","test$GarageQual <- as.integer(revalue(test$GarageQual, qualities))"
"2","The following `from` values were not present in `x`: Ex
"
"0","train$GarageCond[is.na(train$GarageCond)] <- ""None"""
"0","test$GarageCond[is.na(test$GarageCond)] <- ""None"""
"0",""
"0","train$GarageType[is.na(train$GarageType)] <- ""None"""
"0","test$GarageType[is.na(test$GarageType)] <- ""None"""
"0",""
"0","train$BsmtExposure[is.na(train$BsmtExposure)] <- ""None"""
"0","test$BsmtExposure[is.na(test$BsmtExposure)] <- ""None"""
"0",""
"0","train$BsmtFinType2[is.na(train$BsmtFinType2)] <- ""None"""
"0","test$BsmtFinType2[is.na(test$BsmtFinType2)] <- ""None"""
"0",""
"0","train$BsmtFinType1[is.na(train$BsmtFinType1)] <- ""None"""
"0","test$BsmtFinType1[is.na(test$BsmtFinType1)] <- ""None"""
"0",""
"0","train$BsmtQual[is.na(train$BsmtQual)] <- ""None"""
"0","test$BsmtQual[is.na(test$BsmtQual)] <- ""None"""
"0",""
"0","train$BsmtCond[is.na(train$BsmtCond)] <- ""None"""
"0","test$BsmtCond[is.na(test$BsmtCond)] <- ""None"""
"0",""
"0","train$MasVnrType[is.na(train$MasVnrType)] <- ""None"""
"0","test$MasVnrType[is.na(test$MasVnrType)] <- ""None"""
"0",""
"0","train$MasVnrArea[is.na(train$MasVnrArea)] <- 0"
"0","test$MasVnrArea[is.na(test$MasVnrArea)] <- 0"
"0",""
"0","train$Electrical[is.na(train$Electrical)] <- names(sort(-table(train$Electrical)))[1]"
"0","test$Electrical[is.na(test$Electrical)] <- names(sort(-table(test$Electrical)))[1]"
"0",""
"0","train$Electrical <- as.factor(train$Electrical)"
"0","test$Electrical <- as.factor(test$Electrical)"
"0",""
"0","train$MSZoning[is.na(train$MSZoning)] <- names(sort(-table(train$MSZoning)))[1]"
"0","test$MSZoning[is.na(test$MSZoning)] <- names(sort(-table(test$MSZoning)))[1]"
"0",""
"0","table(test$Utilities)"
"1","
"
"1","AllPub "
"1","
"
"1","  1457 "
"1","
"
"0","#Removing the missing values on utilities would make the dataset 100% full of one type of value, so we are going to get rid of it completely"
"0",""
"0","train$Utilities <- NULL"
"0","test$Utilities <- NULL"
"0",""
"0","train$Functional[is.na(train$Functional)] <- names(sort(-table(train$Functional)))[1]"
"0","test$Functional[is.na(test$Functional)] <- names(sort(-table(test$Functional)))[1]"
"0",""
"0","train$Functional <- as.integer(revalue(train$Functional, c(""Sal"" = 0, ""Sev"" = 1, ""Maj2"" = 2, ""Maj1"" = 3, ""Mod"" = 4, ""Min2"" = 5, ""Min1"" = 6, ""Typ"" = 7 )))"
"2","The following `from` values were not present in `x`: Sal
"
"0","test$Functional <- as.integer(revalue(test$Functional, c(""Sal"" = 0, ""Sev"" = 1, ""Maj2"" = 2, ""Maj1"" = 3, ""Mod"" = 4, ""Min2"" = 5, ""Min1"" = 6, ""Typ"" = 7 )))"
"2","The following `from` values were not present in `x`: Sal
"
"0","train$BsmtFullBath[is.na(train$BsmtFullBath)] <- 0 "
"0","test$BsmtFullBath[is.na(test$BsmtFullBath)] <- 0"
"0",""
"0","train$BsmtHalfBath[is.na(train$BsmtHalfBath)] <- 0 "
"0","test$BsmtHalfBath[is.na(test$BsmtHalfBath)] <- 0"
"0",""
"0","train$Exterior1st[is.na(train$Exterior1st)] <- names(sort(-table(train$Exterior1st)))[1]"
"0","test$Exterior1st[is.na(test$Exterior1st)] <- names(sort(-table(test$Exterior1st)))[1]"
"0",""
"0","train$Exterior2nd[is.na(train$Exterior2nd)] <- names(sort(-table(train$Exterior2nd)))[1]"
"0","test$Exterior2nd[is.na(test$Exterior2nd)] <- names(sort(-table(test$Exterior2nd)))[1]"
"0",""
"0","train$BsmtFinSF1[is.na(train$BsmtFinSF1)] <- 0"
"0","test$BsmtFinSF1[is.na(test$BsmtFinSF1)] <- 0"
"0",""
"0","train$BsmtFinSF2[is.na(train$BsmtFinSF2)] <- 0"
"0","test$BsmtFinSF2[is.na(test$BsmtFinSF2)] <- 0"
"0",""
"0","train$BsmtUnfSF[is.na(train$BsmtUnfSF)] <- 0"
"0","test$BsmtUnfSF[is.na(test$BsmtUnfSF)] <- 0"
"0",""
"0","train$TotalBsmtSF[is.na(train$TotalBsmtSF)] <- 0"
"0","test$TotalBsmtSF[is.na(test$TotalBsmtSF)] <- 0"
"0",""
"0","train$KitchenQual[is.na(train$KitchenQual)] <- names(sort(-table(train$KitchenQual)))[1]"
"0","test$KitchenQual[is.na(test$KitchenQual)] <- names(sort(-table(test$KitchenQual)))[1]"
"0",""
"0","train$GarageCars[is.na(train$GarageCars)] <- 0"
"0","test$GarageCars[is.na(test$GarageCars)] <- 0"
"0",""
"0","train$SaleType[is.na(train$SaleType)] <- names(sort(-table(train$SaleType)))[1]"
"0","test$SaleType[is.na(test$SaleType)] <- names(sort(-table(test$SaleType)))[1]"
"0",""
"0","train$ExterQual <- as.integer(revalue(train$ExterQual, qualities))"
"2","The following `from` values were not present in `x`: None, Po
"
"0","test$ExterQual <- as.integer(revalue(test$ExterQual, qualities))"
"2","The following `from` values were not present in `x`: None, Po
"
"0","train$BsmtQual <- as.integer(revalue(train$BsmtQual, qualities))"
"2","The following `from` values were not present in `x`: Po
"
"0","test$BsmtQual <- as.integer(revalue(test$BsmtQual, qualities))"
"2","The following `from` values were not present in `x`: Po
"
"0","train$HeatingQC <- as.integer(revalue(train$HeatingQC, qualities))"
"2","The following `from` values were not present in `x`: None
"
"0","test$HeatingQC <- as.integer(revalue(test$HeatingQC, qualities))"
"2","The following `from` values were not present in `x`: None
"
"0","train$KitchenQual <- as.integer(revalue(train$KitchenQual, qualities))"
"2","The following `from` values were not present in `x`: None, Po
"
"0","test$KitchenQual <- as.integer(revalue(test$KitchenQual, qualities))"
"2","The following `from` values were not present in `x`: None, Po
"
"0","train$PoolQC <- as.integer(revalue(train$PoolQC, qualities))"
"2","The following `from` values were not present in `x`: Po, TA
"
"0","test$PoolQC <- as.integer(revalue(test$PoolQC, qualities))"
"2","The following `from` values were not present in `x`: Po, Fa, TA
"
"0","colnames(train[,colnames(train) %like% ""Q""])"
"1","[1]"
"1"," ""OverallQual"" "
"1"," ""ExterQual""   "
"1"," ""BsmtQual""    "
"1"," ""HeatingQC""   "
"1"," ""LowQualFinSF"""
"1","
"
"1","[6]"
"1"," ""KitchenQual"" "
"1"," ""FireplaceQu"" "
"1"," ""GarageQual""  "
"1"," ""PoolQC""      "
"1","
"
"0","table(train$PoolQC)"
"1","
"
"1","   0 "
"1","   2 "
"1","   4 "
"1","   5 "
"1","
"
"1","1453 "
"1","   2 "
"1","   3 "
"1","   2 "
"1","
"
